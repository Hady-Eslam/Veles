<?php

use Veles\Helper;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-20 at 12:06:50.
 */
class HelperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Veles\Helper::genStr
     * @dataProvider testGenStrProvider
     */
    public function testGenStr($length, $letters)
    {
        $result          = Helper::genStr($length, $letters);
        $result_length   = strlen($result);
        $unknown_array   = array();
        $unknown_symbols = '';

        $this->assertInternalType('string', $result, 'Wrong result type: ' . gettype($result));
        $this->assertEquals($length, $result_length, "Wrong result length: $result_length");

        for ($i = 0; $i < $result_length; ++$i) {
            if (false === strpos($letters, $result[$i])) {
                $unknown_array[] = '"' . $result[$i] . '"';
            }
        }

        $this->assertTrue(empty($unknown_array),
            'Result contains unknown symbols: ' . implode(',', $unknown_array)
        );
    }

    /**
     * DataProvider for HelperTest::testGenStr()
     */
    public function testGenStrProvider()
    {
        return array(
            array(21, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./'),
            array(30, 'ABCDEFGHIJKLMNOPQRSTUVWX%$#'),
            array(30, 'A|@абвгдеёжзийклмнопрстуфхцчшщъыьэюя%$#')
        );
    }

    /**
     * @covers Veles\Helper::validateEmail
     * @dataProvider testValidateEmailProvider
     */
    public function testValidateEmail($email, $expected)
    {
        $result = Helper::validateEmail($email);

        $this->assertTrue($expected === $result,
            "Email \"$email\" has wrong validation result: " . (($result) ? '"true"' : '"false"')
        );
    }

    /**
     * DataProvider for HelperTest::testValidateEmail
     */
    public function testValidateEmailProvider()
    {
        return array(
            array('nd_lk.test-pro@mail.ru', true),
            array('nd/lk@mail.ru', false),
            array('длоndlk@mail.ru', false),
            array('email@wrong-domain', false),
            array('email@wrong_domain.wrongld', false),
            array('email@wrong_domain.wro-d', false)
        );
    }

    /**
     * @covers Veles\Helper::checkEmailDomain
     * @dataProvider testCheckEmailDomainProvider
     */
    public function testCheckEmailDomain($email, $expected)
    {
        $result = Helper::checkEmailDomain($email);

        $this->assertTrue($expected === $result,
            "Email \"$email\" has wrong check domain result: " . (($result) ? '"true"' : '"false"')
        );
    }

    /**
     * DataProvider for HelperTest::testCheckEmailDomain
     */
    public function testCheckEmailDomainProvider()
    {
        return array(
            array('mail@google.com', true),
            array('mail@yandex.ru', true),
            array('error@wrongdomain.opa-opa', false)
        );
    }

    /**
     * @covers Veles\Helper::translit
     * @dataProvider testTranslitProvider
     */
    public function testTranslit($text, $expected)
    {
        $result = Helper::translit($text);

        $this->assertTrue($expected === $result,
            "Text \"$text\" has wrong translit result: \"$result\""
        );
    }

    /**
     * DataProvider for HelperTest::testTranslit
     */
    public function testTranslitProvider()
    {
        return array(
            array('АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёждийклмнопрстуфхцчшщъыьэюя ".,!?()#@*&[]:;<>+', 'abvgdeyozhzijklmnoprstufhtschshshhyeyuyaabvgdeyozhdijklmnoprstufhtschshshhyeyuya-')
        );
    }

    /**
     * @covers Veles\Helper::makeAlias
     * @depends testTranslit
     * @dataProvider testMakeAliasProvider
     */
    public function testMakeAlias($url, $expected)
    {
        $result = Helper::makeAlias($url);

        $this->assertTrue($expected === $result,
            "URL \"$url\" has wrong make alias result: \"$result\""
        );
    }

    /**
     * DataProvider for HelperTest::testMakeAlias
     */
    public function testMakeAliasProvider()
    {
        return array(
            array('Кровельная черепица', 'krovelnaya-cherepitsa'),
            array('Внеземные цивилизации', 'vnezemnye-tsivilizatsii')
        );
    }
}
