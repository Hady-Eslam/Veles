<?php
namespace Veles\Tests\Cache\Adapters;

use Veles\Tests\Cache\Adapters\MemcachedAdapterChild;
use Veles\Cache\Adapters\MemcachedAdapter;
use Veles\Cache\Cache;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-06 at 15:06:37.
 */
class MemcachedAdapterTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var MemcachedAdapter
	 */
	protected $object;

	public static function setUpBeforeClass()
	{
		Cache::setAdapter('Memcached');
	}

	public static function tearDownAfterClass()
	{
		Cache::setAdapter();
	}

	/**
	 * For each test set up adapter
	 */
	public function setUp()
	{
		$this->object = Cache::getAdapter();
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::__construct
	 */
	public function testInstance()
	{
		$object = MemcachedAdapterChild::getTestInstance();
		$result = $object->getDriverForTest();
		$expected = 'Memcached';
		$msg = 'Wrong result driver inside MemcachedAdapter!';
		$this->assertInstanceOf($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::get
	 * @dataProvider getProvider
	 */
	public function testGet($key, $expected)
	{
		$result = $this->object->get($key);
		$msg = 'Wrong MemcachedAdapter::get result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function getProvider()
	{
		$params = array();

		for ($i = 0; $i < 3; ++$i) {
			$key = uniqid('RBK::UNIT-TEST::');
			$value = uniqid();
			Cache::getAdapter()->set($key, $value, 10);
			$params[] = array($key, $value);
		}

		return $params;
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::set
	 */
	public function testSet()
	{
		$params = array();

		for ($i = 0; $i < 3; ++$i) {
			$key = uniqid('RBK::UNIT-TEST::');
			$value = uniqid();
			$this->object->set($key, $value, 10);
			$params[] = array($key, $value);
		}

		$msg = 'Wrong MemcachedAdapter::set result!';
		foreach ($params as $param) {
			$result = $this->object->get($param[0]);
			$this->assertSame($param[1], $result, $msg);
		}
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::has
	 * @dataProvider hasProvider
	 */
	public function testHas($key, $expected)
	{
		$result = $this->object->has($key);
		$msg = 'Wrong MemcachedAdapter::has result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function hasProvider()
	{
		$params = array();

		for ($i = 0; $i < 3; ++$i) {
			$key = uniqid('RBK::UNIT-TEST::');
			$value = uniqid();
			Cache::getAdapter()->set($key, $value, 10);
			$params[] = array($key, true);
		}

		for ($i = 0; $i < 3; ++$i) {
			$key = uniqid('RBK::UNIT-TEST::');
			$params[] = array($key, false);
		}

		return $params;
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::del
	 * @dataProvider hasProvider
	 */
	public function testDel($key, $expected)
	{
		$result = $this->object->del($key);
		$msg = 'Wrong MemcachedAdapter::del result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::increment
	 * @dataProvider incrementProvider
	 */
	public function testIncrement($key, $offset, $expected)
	{
		$result = (null === $offset)
			? $this->object->increment($key, 1)
			: $this->object->increment($key, $offset);

		$msg = 'MemcachedAdapter::increment returned wrong result type!';
		$this->assertInternalType('integer', $result, $msg);
		$msg = 'MemcachedAdapter::increment returned wrong result value!';
		$this->assertSame($expected, $result, $msg);
	}

	public function incrementProvider()
	{
		$key    = uniqid('RBK::UNIT-TEST::');
		$value  = mt_rand(0, 1000);
		Cache::getAdapter()->set($key, $value, 10);
		$params = array(array($key, null, ++$value));

		for ($i = 0; $i < 5; ++$i) {
			$key    = uniqid('RBK::UNIT-TEST::');
			$value  = mt_rand(0, 1000);
			$offset = mt_rand(0, 1000);
			Cache::getAdapter()->set($key, $value, 10);
			$params[] = array($key, $offset, $value + $offset);
		}

		return $params;
	}

	/**
	 * @covers Veles\Tests\Cache\MemcachedAdapter::decrement
	 * @dataProvider decrementProvider
	 */
	public function testDecrement($key, $offset, $expected)
	{
		$result = (null === $offset)
			? $this->object->decrement($key, 1)
			: $this->object->decrement($key, $offset);

		$msg = 'MemcachedAdapter::decrement returned wrong result type!';
		$this->assertInternalType('integer', $result, $msg);
		$msg = 'MemcachedAdapter::decrement returned wrong result value!';
		$this->assertSame($expected, $result, $msg);
	}

	public function decrementProvider()
	{
		$key    = uniqid('RBK::UNIT-TEST::');
		$value  = mt_rand(1, 1000);
		Cache::getAdapter()->set($key, $value, 10);
		$params = array(array($key, null, --$value));

		for ($i = 0; $i < 5; ++$i) {
			$key    = uniqid('RBK::UNIT-TEST::');
			$value  = mt_rand(1000, 2000);
			$offset = mt_rand(0, 1000);
			Cache::getAdapter()->set($key, $value, 10);
			$params[] = array($key, $offset, $value - $offset);
		}

		return $params;
	}

	/**
	 * @fixme If this test enabled all other cache test throws exception
	 *
	 * @covers Veles\Tests\Cache\MemcachedAdapter::clear
	 */
//	public function testClear()
//	{
//		$params = array();
//
//		for ($i = 0; $i < 10; ++$i) {
//			$key = uniqid('RBK::UNIT-TEST::');
//			$value = uniqid();
//			$this->object->set($key, $value, 10);
//			$params[] = $key;
//		}
//
//		$result = $this->object->clear();
//
//		$msg = 'Wrong MemcachedAdapter::clear() result!';
//		$this->assertSame(true, $result, $msg);
//
//		$result = false;
//		foreach ($params as $key) {
//			if ($this->object->get($key)) $result = true;
//		}
//
//		$msg = 'Cache was not cleared!';
//		$this->assertSame(false, $result, $msg);
//	}
}
