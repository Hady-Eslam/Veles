<?php
namespace Veles\Tests\Model;

use Veles\Model\QueryBuilder;
use Veles\Model\User;
use Veles\Auth\UsrGroup;
use Veles\DataBase\Db;
use Veles\DataBase\Adapters\PdoAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-27 at 16:15:58.
 */
class QueryBuilderTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var QueryBuilder
	 */
	protected $object;
	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Create test table
		$tbl_name = static::$tbl_name = User::TBL_NAME;

		Db::setAdapter(PdoAdapter::instance());
		Db::query("
			CREATE TABLE $tbl_name (
			  id int(10) unsigned NOT NULL DEFAULT '0',
			  `group` tinyint(3) unsigned NOT NULL DEFAULT '16',
			  email char(30) NOT NULL,
			  hash char(60) NOT NULL,
			  short_name char(30) NOT NULL,
			  name char(30) NOT NULL DEFAULT 'n\\a',
			  patronymic char(30) NOT NULL DEFAULT 'n\\a',
			  surname char(30) NOT NULL DEFAULT 'n\\a',
			  birth_date date NOT NULL,
			  last_login timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
			  PRIMARY KEY (id),
			  KEY email (email)
			) ENGINE=INNODB DEFAULT CHARSET=utf8
		");
		// superpass GlOaUExBSD9HxuEYk2ZFaeDhggU716O
		Db::query("
			INSERT INTO $tbl_name
				(id, email, hash, short_name, birth_date)
			VALUES
				(?, ?, ?, ?, ?)
		", [
			1, 'mail@mail.org',
			'$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'uzzy', '1980-12-12'
		], 'issss');
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		Db::query("DROP TABLE $table");
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new QueryBuilder;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers Veles\Model\QueryBuilder::insert
	 */
	public function testInsert()
	{
		$group = UsrGroup::GUEST;
		$hash = md5('lalala');

		$user = new User;
		$user->id = 1;
		$user->email = 'mail@mail.org';
		$user->hash = $hash;
		$user->group = $group;

		$expected = "
			INSERT
				`users`
				(`id`, `email`, `hash`, `group`)
			VALUES
				(1, 'mail@mail.org', '$hash', $group)
		";
		$result = $this->object->insert($user);

		$msg = 'QueryBuilder::insert() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Model\QueryBuilder::update
	 */
	public function testUpdate()
	{
		$group = UsrGroup::GUEST;
		$hash = md5('lalala');

		$user = new User;
		$user->id = 1;
		$user->email = 'mail@mail.org';
		$user->hash = $hash;
		$user->group = $group;

		$expected = "
			UPDATE
				`users`
			SET
				`email` = 'mail@mail.org', `hash` = '9aa6e5f2256c17d2d430b100032b997c', `group` = 16
			WHERE
				id = 1
		";
		$result = $this->object->update($user);

		$msg = 'QueryBuilder::update() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Model\QueryBuilder::getById
	 */
	public function testGetById()
	{
		$user = new User;
		$expected = "
			SELECT *
			FROM
				users
			WHERE
				id = 1
			LIMIT 1
		";

		$msg = 'QueryBuilder::getById() returns wrong result!';
		$result = $this->object->getById($user, 1);
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Model\QueryBuilder::delete
	 * @todo   Implement testDelete().
	 */
	public function testDelete()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Veles\Model\QueryBuilder::find
	 * @todo   Implement testFind().
	 */
	public function testFind()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Veles\Model\QueryBuilder::setPage
	 * @todo   Implement testSetPage().
	 */
	public function testSetPage()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}
}
