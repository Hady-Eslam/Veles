<?php
namespace Veles\Tests\Routing;

use Controllers\Frontend\Home;
use Exception;
use Veles\Routing\Route;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-22 at 09:52:48.
 */
class RouteTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var Route
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers Veles\Routing\Route::instance
	 */
	public function testInstance()
	{
		$_SERVER['REQUEST_URI'] = '/';
		RouteCopy::instance()->unsetInstance();
		$result = RouteCopy::instance();

		$msg = 'Route::instance() returns wrong result!';
		$this->assertSame(RouteCopy::getInstance(), $result, $msg);

		$result = RouteCopy::instance();

		$msg = 'Route::instance() returns wrong result!';
		$this->assertSame(RouteCopy::getInstance(), $result, $msg);
	}

	/**
	 * @covers Veles\Routing\Route::isAjax
	 * @covers Veles\Routing\Route::checkAjax
	 */
	public function testIsAjax()
	{
		RouteCopy::instance()->unsetInstance();
		$_SERVER['REQUEST_URI'] = '/';
		$expected = false;
		$result = RouteCopy::instance()->isAjax();

		$msg = 'Wrong Route::isAjax() result!';
		$this->assertSame($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
		$_SERVER['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest';
		$_SERVER['REQUEST_URI'] = '/contacts';
		$expected = true;
		$result = RouteCopy::instance()->isAjax();

		$msg = 'Wrong Route::isAjax() result!';
		$this->assertSame($expected, $result, $msg);

		unset($_SERVER['HTTP_X_REQUESTED_WITH']);
		RouteCopy::instance()->unsetInstance();
	}

	/**
	 * @covers Veles\Routing\Route::checkAjax
	 * @expectedException Exception
	 * @expectedExceptionMessage AJAX-route got non-AJAX request!
	 */
	public function testCheckAjaxException()
	{
		$_SERVER['REQUEST_URI'] = '/contacts';
		$result = RouteCopy::instance()->getController();
	}

	/**
	 * @covers Veles\Routing\Route::getController
	 */
	public function testGetController()
	{
		$_SERVER['REQUEST_URI'] = '/';
		$expected = new Home;
		$result = RouteCopy::instance()->getController();

		$msg = 'Route::getController() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан контроллер!
	 */
	public function testGetControllerException()
	{
		$_SERVER['REQUEST_URI'] = '/user';
		RouteCopy::instance()->getController();
	}

	/**
	 * @covers Veles\Routing\Route::getActionName
	 */
	public function testGetActionName()
	{
		$_SERVER['REQUEST_URI'] = '/';
		$expected = 'index';
		RouteCopy::instance()->unsetInstance();
		$result = RouteCopy::instance()->getActionName();

		$msg = 'Route::getActionName() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан экшен!
	 */
	public function testGetActionNameException()
	{
		$_SERVER['REQUEST_URI'] = '/user';
		RouteCopy::instance()->getActionName();
	}

	/**
	 * @covers Veles\Routing\Route::getAdapter
	 */
	public function testGetAdapter()
	{
		$_SERVER['REQUEST_URI'] = '/';
		$expected = \Veles\View\Adapters\NativeAdapter::instance();
		RouteCopy::instance()->unsetInstance();
		$result = RouteCopy::instance()->getAdapter();

		$msg = 'Route::getAdapter() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан адаптер!
	 */
	public function testGetAdapterException()
	{
		$_SERVER['REQUEST_URI'] = '/user';
		RouteCopy::instance()->getAdapter();
	}

	/**
	 * @covers Veles\Routing\Route::getPageName
	 */
	public function testGetPageName()
	{
		$_SERVER['REQUEST_URI'] = '/';
		RouteCopy::instance()->unsetInstance();
		$expected = 'Home';
		$result = RouteCopy::instance()->getPageName();

		$msg = 'Route::getPageName() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}

	/**
	 * @covers Veles\Routing\Route::getMap
	 * @covers Veles\Routing\Route::__construct
	 * @dataProvider getMapProvider
	 */
	public function testGetMap($url, $expected)
	{
		$_SERVER['REQUEST_URI'] = $url;
		RouteCopy::instance()->unsetInstance();

		$route = RouteCopy::instance();
		$msg = 'Route::$map wrong value!';
		$this->assertAttributeSame($expected, 'map', $route, $msg);

		$result = RouteCopy::instance()->getMap();

		$msg = 'Route::getMap() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}

	public function getMapProvider()
	{
		return [
			['/page-2.html', ['page' => '2']],
			['/page-8.html', ['page' => '8']],
			['/book/5/user/4', ['book_id' => '5', 'user_id' => '4']],
			['/book/5000/user/43', ['book_id' => '5000', 'user_id' => '43']],
			['/book/15/user/14', ['book_id' => '15', 'user_id' => '14']],
			['/book/500/user/143', ['book_id' => '500', 'user_id' => '143']]
		];
	}

	/**
	 * @covers Veles\Routing\Route::getTemplate
	 * @covers Veles\Routing\Route::__construct
	 */
	public function testGetTemplate()
	{
		$_SERVER['REQUEST_URI'] = '/';
		$expected = 'Frontend/index.phtml';
		RouteCopy::instance()->unsetInstance();
		$result = RouteCopy::instance()->getTemplate();

		$msg = 'Route::getTemplate() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();

		$_SERVER['REQUEST_URI'] = '/user';
		$expected = null;
		RouteCopy::instance()->unsetInstance();
		$result = RouteCopy::instance()->getTemplate();

		$msg = 'Route::getTemplate() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		RouteCopy::instance()->unsetInstance();
	}
}
