<?php
/**
 * Юнит-тест для класса Application
 * @file    Application.php
 *
 * PHP version 5.4+
 *
 * @author  Alexander Yancharuk <alex at itvault dot info>
 * @date    Втр Янв 22 22:53:39 2013
 * @copyright The BSD 3-Clause License.
 */

namespace Veles\Tests\Application;

use Application\ApplicationChild;
use PHPUnit_Framework_TestCase;
use Veles\Application\Application;
use Veles\Routing\Route;
use Veles\View\View;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-22 at 22:53:39.
 * @group Application
 */
class ApplicationTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var View
	 */
	protected $view;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->view = new View;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->view->del(['a', 'b', 'c']);
	}

	/**
	 * Unit-test for Application::run
	 * @covers       Veles\Application\Application::run
	 * @dataProvider runProvider
	 *
	 * @param $url
	 * @param $expected
	 */
	public function testRun($url, $expected)
	{
		$_SERVER['REQUEST_URI'] = $url;
		$this->expectOutputString($expected['output']);

		Application::run();

		$route  = Route::instance();
		$result = $route->getMap();

		$msg = "Wrong Route::map in $url";
		$this->assertSame($expected['map'], $result, $msg);
	}

	/**
	 * DataProvider for Application::run
	 */
	public function runProvider()
	{
		$uri      = '/page-2.html';
		$expected = [
			'map'    => ['page' => '2'],
			'output' => <<<EOF
<!DOCTYPE html>
<html>
<head>
	<title>Veles is a fast PHP framework</title>
</head>
<body>
	<div id="main_wrapper">
		Test complete!
	</div>
	<div id="footer_wrapper">
		Hello World!
	</div>
</body>
</html>

EOF
		];

		return [[$uri, $expected]];
	}

	/**
	 * @dataProvider setPhpSettingsProvider
	 *
	 * @param $params
	 * @param $expected_arr
	 */
	public function testSetPhpSettings($params, $expected_arr)
	{
		ApplicationChild::phpSettings($params);

		foreach ($expected_arr as $param => $expected) {
			$result = ini_get($param);

			$msg = "Wrong '$param' result: $result";
			$this->assertSame($expected, $result, $msg);
		}
	}

	/**
	 * Data provider for Application::setPhpSettings()
	 *
	 * @return array
	 */
	public function setPhpSettingsProvider()
	{
		ini_set('display_errors', 0);
		ini_set('log_errors', 0);
		ini_set('xdebug.cli_colors', 0);
		ini_set('xdebug.remote_host', 'lalala');
		ini_set('xdebug.remote_port', 9000);
		ini_set('xdebug.remote_enable', 0);
		ini_set('xdebug.max_nesting_level', 150);
		ini_set('xdebug.var_display_max_children', 200);
		ini_set('xdebug.var_display_max_data', 200);
		ini_set('xdebug.var_display_max_depth', 200);

		return [[
			[],
			[
				// ожидаемый результат, переменные будут взяты из конифга
				'display_errors' => '1',
				'log_errors' => '1',
				'xdebug.cli_color' => '1',
				'xdebug.var_display_max_children' => '-1'
			]
		], [
			[
				'xdebug.remote_host' => 'localhost',
				'xdebug.remote_port' => 9137,
				'xdebug.max_nesting_level' => 100,
				'xdebug.var_display_max_data' => -1,
				'xdebug.var_display_max_depth' => -1
			],
			[
				'xdebug.remote_host' => 'localhost',
				'xdebug.remote_port' => '9137',
				'xdebug.max_nesting_level' => '100',
				'xdebug.var_display_max_data' => '-1',
				'xdebug.var_display_max_depth' => '-1'
			]
		], ];
	}
}
